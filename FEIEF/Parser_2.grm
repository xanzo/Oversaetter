%{

open FEIEF;

%}

%token FALSE TRUE AND OR LPAR RPAR EOF
%token FORALL EXISTS DOT IMPLIES NOT
%token <string> VAR

%nonassoc forall exists
%right IMPLIES
%left AND OR
%nonassoc NOT

%start Prog

%type <FEIEF.Expr> Prog
%type <FEIEF.Expr> Expr

%%

Prog : Expr EOF { $1 }
;

Expr : FALSE								{ False }
	| True									{ True }
	| VAR 									{ Var $1 }
	| FORALL VAR DOT Expr %prec forall		{ Forall($2, $4) }
	| EXISTS VAR DOT Expr %prec exists		{ Exists($2, $4) }
	| Expr AND Expr							{ And ($1, $3) }
	| Expr OR Expr							{ Or ($1, $3) }
	| NOT Expr								{ Not ($2) }
	| Expr IMPLIES Expr						{ Implies ($1, $3) }
	| LPAR Expr RPAR						{ $2 }
;

%%
