%{

open FEIEF;

%}

%token NOT OR AND IMPLIES FORALL EXISTS DOT LPAR RPAR FALSE TRUE EOF
%token <STRING> VAR

%start Prog

%type <FEIEF.Expr> Prog
%type <FEIEF.Exp> Expr

%nonassoc FORALL
%nonassoc EXISTS
%right IMPLIES
%left AND OR
%nonassoc NOT

%%

Prog : Expr EOF { $1 }
;

Expr : Expr OR Expr		{ Or ($1, $3) }
	| Expr AND Expr		{ And ($1, $3) }
    | NOT Expr			{ Not ($2) }
    | LPAR Expr RPAR 	{ LPAR $1 RPAR }
    | Expr IMPLIES Expr	{ IMPLIES ($1, $3) }
;

%%
